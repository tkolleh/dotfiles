# -*-mode:sh-*- vim:ft=zsh
#
# ~/.zshrc
# =============================================================================
#
#
# Hide default user from local prompt.
export DEFAULT_USER="${USER}"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
export UPDATE_ZSH_DAYS=7

# -- Light / Dark mode styles ----------------------------------
#

# Light mode is the default. Check if apple settings are for darkmode
function is_dark_mode() {
  if [[ "$(uname -s)" == "Darwin" ]]; then
    interface_mode=$(defaults read -g AppleInterfaceStyle 2>/dev/null)
    if [[ $interface_mode == "Dark" ]]; then
      return 0
    else
      return 1
    fi
  fi
}

function set_zsh_auto_suggest_colors() {
  if is_dark_mode; then
    # Set zsh auto suggest colors
    ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=237"
  else
    ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=248"
  fi
}

function set_prompt_mode() {
  # Change Starship prompt configuration based on Apple appearance 
  # setting (light / dark mode) and the active iTerm2 profile
  if is_dark_mode && [[ $ITERM_PROFILE == "Github" ]]; then
      starship config palette dark
  else
      starship config palette light
  fi
  set_zsh_auto_suggest_colors
}

function dark!() {
  set_zsh_auto_suggest_colors
  set_prompt_mode
  if is_dark_mode && (( ${+commands[bat]} )); then
    export BAT_THEME="Dracula"
  else
    export BAT_THEME="GitHub"
  fi
}

# -- Plugins -------------------------------------------------- 
#

# Install zpm-zsh
if [[ ! -f ~/.zpm/zpm.zsh ]]; then
  git clone --recursive https://github.com/zpm-zsh/zpm ~/.zpm
fi
source ~/.zpm/zpm.zsh

# Pull in OMZ (doesn't actually source anything)
zpm load @omz

zpm load                         \
  @omz-lib/functions             \
  @omz-lib/prompt_info_functions \
  @omz-lib/git                   \
  @omz-lib/compfix               \
  @omz-lib/grep                  \
  @omz-lib/termsupport           \
  @omz-lib/spectrum              \
  @omz-lib/history               \
  @omz-lib/key-bindings          \
  @omz-lib/completion

# Load some OMZ plugins and theme
zpm load                  \
  @omz/git                \
  @omz/colored-man-pages

# Plugins for local host
zpm if-not ssh load                                   \
  zdharma-continuum/fast-syntax-highlighting          \
  zpm-zsh/zsh-history-substring-search                \
  zpm-zsh/zsh-autosuggestions,async                   \
  zsh-users/zsh-completions,async                     \
  zpm-zsh/zsh-better-npm-completion,async

autoload -U compinit && compinit

# Disable autosuggestion for large buffers.
export ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE="50"

# Enable aynchronous mode.
export ZSH_AUTOSUGGEST_USE_ASYNC=true

set_zsh_auto_suggest_colors

# Bind keys for zsh-history-substring-search. Plugin must be loaded 
# after fast-syntax-highlighting.

bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down

bindkey "$terminfo[kcuu1]" history-substring-search-up
bindkey "$terminfo[kcud1]" history-substring-search-down

# bindkey -M vicmd 'k' history-substring-search-up
# bindkey -M vicmd 'j' history-substring-search-down

# -- Initialize tools ----------------------------------------
#
# Alternative to cd
# The default command is `z` the `--cmd cd` option replaces `cd` 
# command.
if (( ${+commands[zoxide]} )); then
  eval "$(zoxide init zsh)"
  export _ZO_ECHO=1
fi

if (( ${+commands[conda]} )); then
    zpm load @github/esc/conda-zsh-completion
    export CONDA_ENVS="/usr/local/anaconda3/envs"

    conda_path="$(whence -cp conda)"
    #
    # >>> conda initialize >>>
    #
    __conda_setup="$($conda_path 'shell.zsh' 'hook' 2> /dev/null)"
    if [ $? -eq 0 ]; then
        eval "$__conda_setup"
    else
        if [ -f "/opt/anaconda3/etc/profile.d/conda.sh" ]; then
            . "/opt/anaconda3/etc/profile.d/conda.sh"
        else
            export PATH="/opt/anaconda3/bin:$PATH"
        fi
    fi
    unset __conda_setup
    #
    # <<< conda initialize <<<
    #
fi

if (( ${+commands[fd]} )) && (( ${+commands[rg]} )) && (( ${+commands[fzf]} )) && (( ${+commands[bat]} )); then
    zpm load @github/unixorn/fzf-zsh-plugin    

    export FZF_DEFAULT_COMMAND='fd --type f --color=never --ignore-case --no-ignore --hidden --follow'
    export FZF_DEFAULT_OPTS="--bind 'f1:execute(bat --paging=always --color=always {}),f2:execute($EDITOR {})+abort,ctrl-y:execute-silent(echo {} | pbcopy)+abort' --bind '?:toggle-preview' --preview='bat --number --color=always {} | head -700' --preview-window='right:50%:hidden'"
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

    # Search for files
    export FZF_ALT_C_COMMAND='fd --type d --color=never --no-ignore --ignore-case --hidden --follow '

    # Search recent commands
    export FZF_CTRL_R_OPTS="$FZF_DEFAULT_OPTS"
fi

if (( ${+commands[asdf]} )); then
    zpm load @omz-lib/asdf

    export JAVA_HOME="$(asdf where java $(asdf current java | awk '{ print $2 }'))"
    export SCALA_HOME="$(asdf where scala $(asdf current scala | awk '{ print $2 }'))"
    export SBT_HOME="$(asdf where sbt $(asdf current sbt | awk '{ print $2 }'))"
    if [[ -d "$JAVA_HOME"/bin ]]; then
      export PATH="$JAVA_HOME/bin:$SCALA_HOME/bin:$SBT_HOME/bin:$PATH"
    fi

    # Node JS added to path
    # export NODEJS_HOME="$(asdf where nodejs $(asdf current nodejs | awk '{ print $2 }'))"
    # if [[ -d "$NODEJS_HOME"/bin ]]; then
    #   export PATH="$PATH:$NODEJS_HOME/bin"
    # fi 
    export PATH="/opt/homebrew/opt/node@16/bin:$PATH"
    export LDFLAGS="-L/opt/homebrew/opt/node@16/lib"
    export CPPFLAGS="-I/opt/homebrew/opt/node@16/include"
fi

if (( ${+commands[scala-cli]} )); then
  # >>> scala-cli completions >>>
  fpath=("$HOME/Library/Application Support/ScalaCli/completions/zsh" $fpath)
  compinit
  # <<< scala-cli completions <<<
fi

if (( ${+commands[cs]} )); then
  # Scala application manager
  # add installation directory in PATH in the current session
  eval "$(cs install --env)" 
fi

if (( ${+commands[bat]} )) && (( ${+commands[delta]} )); then
  export BAT_THEME="GitHub"
  export BATDIFF_USE_DELTA=true
fi

if (( ${+commands[atuin]} )); then
  eval "$(atuin init zsh)"
fi

# The next line updates PATH for the Google Cloud SDK.
if [ -f "$HOME"/google-cloud-sdk/path.zsh.inc ]; then . "$HOME"/google-cloud-sdk/path.zsh.inc; fi

# The next line enables shell command completion for gcloud.
if [ -f "$HOME"/google-cloud-sdk/completion.zsh.inc ]; then . "$HOME"/google-cloud-sdk/completion.zsh.inc; fi


# Load custom code from separate configuration file.
if [[ -f "$HOME"/.zsh_functions ]]; then
    source "$HOME"/.zsh_functions
fi

if [[ -f "$HOME"/.host_functions ]]; then
    source "$HOME"/.host_functions
fi

# TODO: move to aliases (zshell specific dir)
# Load alias definitions from separate configuration file.
if [[ -f "$HOME"/.bash_aliases ]]; then
    source "$HOME"/.bash_aliases
fi

# -- Prompt --------------------------------------------------
#

# Starship cross-shell prompt
# 
# Install starship
eval "$(starship init zsh)"
set_prompt_mode

# Must be last
source $(brew --prefix asdf)/libexec/asdf.sh
