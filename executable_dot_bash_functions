#!/usr/bin/env bash
#
# =============================================================================
#
# Executed by bash for non-login shells.
#
# If not running interactively, don't do anything.
case $- in
*i*) ;;
*) return ;;
esac

#
# TODO: Change documentation to https://github.com/tests-always-included/tomdoc.sh
# where applicable and create separate files for functions
#

user_functions_loaded=1

function ws() {
  workspace=$(fd --type d -uu -a . "$HOME/ws" | fzf)
  cd $workspace
}

# Open Marked 2, passing provided file path to the application
function marked() {
  if [ -n "${1}" ]; then
    open -a "Marked 2" "${1}"
  else
    open -a "Marked 2"
  fi
}

function pathtosymlink(){
  if [ -L "${1}" ] ; then
   if [ -e "${1}" ] ; then
      true
   else
      false
   fi
  elif [ -e "${1}" ] ; then
     false
  else
     false
  fi
}

#
# Using autojump combined with fzf
#
# j() {
#     if [[ "$#" -ne 0 ]]; then
#         cd $(autojump $@)
#         return
#     fi
#     cd "$(autojump -s | sort -k1gr | gawk '$1 ~ /[0-9]:/ && $2 ~ /^\// { for (i=2; i<=NF; i++) { print $(i) } }' |  fzf --height 40% --reverse --inline-info)" 
# }

# using ripgrep combined with preview
# find-in-file - usage: fif <searchTerm>
# reference: https://github.com/junegunn/fzf/wiki/examples#searching-file-contents
function fif() {
  if [ ! "$#" -gt 0 ]; then
    echo "Need a string to search for!"
    return 1
  fi
  rg --files-with-matches --no-messages "$1" | fzf --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' || rg --ignore-case --pretty --context 10 '$1' {}"
}

# an alternative to the above using ripgrep-all (rga)
function fid() {
  if [ ! "$#" -gt 0 ]; then
    echo "Need a string to search for!"
    return 1
  fi
  rga --files-with-matches --no-messages "$1" | fzf --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' || rg --ignore-case --pretty --context 10 '$1' {}"
}

# fbr - checkout git branch (including remote branches), sorted by most recent commit, limit 30 last branches
# reference: https://github.com/junegunn/fzf/wiki/examples#git
function fbr() {
  local branches branch
  branches=$(git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)") &&
    branch=$(echo "$branches" |
      fzf-tmux -d $((2 + $(wc -l <<<"$branches"))) +m) &&
    git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

alias glNoGraph='git log --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr% C(auto)%an" "$@"'
_gitLogLineToHash="echo {} | grep -o '[a-f0-9]\{7\}' | head -1"
_viewGitLogLine="$_gitLogLineToHash | xargs -I % sh -c 'git show --color=always % | diff-so-fancy'"

# fcoc_preview - checkout git commit with previews
function fcoc_preview() {
  local commit
  commit=$(glNoGraph |
    fzf --no-sort --reverse --tiebreak=index --no-multi \
      --ansi --preview="$_viewGitLogLine") &&
    git checkout $(echo "$commit" | sed "s/ .*//")
}

# fshow_preview - git commit browser with previews
function fshow_preview() {
  glNoGraph |
    fzf --no-sort --reverse --tiebreak=index --no-multi \
      --ansi --preview="$_viewGitLogLine" \
      --header "enter to view, alt-y to copy hash" \
      --bind "enter:execute:$_viewGitLogLine   | less -R" \
      --bind "alt-y:execute:$_gitLogLineToHash | xclip"
}

# fcs - get git commit sha
# example usage: git rebase -i `fcs`
function fcs() {
  local commits commit
  commits=$(git log --color=always --pretty=oneline --abbrev-commit --reverse) &&
    commit=$(echo "$commits" | fzf --tac +s +m -e --ansi --reverse) &&
    echo -n $(echo "$commit" | sed "s/ .*//")
}

# Check the content length of a file and print size in MB
function contentlength() {
  if [[ ! -z "$1" ]]; then
    curl -sLI $1 | awk 'tolower($1) ~ /content-length/ {print $1, ($2/1000000), "MB"}'
  else
    echo "Enter URL to file"
  fi
}

function viml() {
  if [[ -f "$LAST_NVIM_SESSION" ]]; then
    nvim -S $LAST_NVIM_SESSION
  else
    echo "Last nvim session not found at $LAST_NVIM_SESSION"
    touch $LAST_NVIM_SESSION
    echo "Made a new file"
  fi
}

function vims() {
  SESSION=$(fd . -a $NVIM_SESSION | fzf)
  nvim -S "$SESSION"
}

function updatenvim() {
  echo ".  .     .    ,     .  .     .  .      ";
  echo "|  |._  _| _.-+-_   |\ | _  _\  /*._ _ ";
  echo "|__|[_)(_](_] |(/,  | \|(/,(_)\/ |[ | )";
  echo "    |                                  ";

  echo -e '  \u001b[34mInstalling, updating and cleaning neovim plugins\u001b[0m'
  echo -e '============================================================'
  {
    nvim "+call minpac#update('', {'do': 'quitall'})"
  } || { echo -e '  \u001b[31mError updating minpac\u001b[0m'; }
  { 
    conda update -n base --all --yes
    npm update -g neovim
    brew reinstall -q nvim
  } && { 
    echo -e '  \u001b[34m\n============================================================\u001b[0m'; 
  }
  echo
  # ASCII art by http://patorjk.com/software/taag/#p=display&h=1&c=echo&f=Contessa&t=Update%20NeoVim
}

function updatetmux() {
  echo "                                                                     ";
  echo " | | ._   _|  _. _|_  _    _|_ ._ _           ._  |      _  o ._   _ ";
  echo " |_| |_) (_| (_|  |_ (/_    |_ | | | |_| ><   |_) | |_| (_| | | | _> ";
  echo "     |                                        |          _|          ";
  echo -e '  \u001b[34mUpdate all tmux plugins\u001b[0m'
  echo -e '  \u001b[34mTPM updating plugins\u001b[0m'
  echo -e '==========================='

  if $HOME/.tmux/plugins/tpm/bin/update_plugins all; then
    echo -e '==========================='
    echo -e '  \u001b[34mTMUX plugins updated\u001b[0m'
    if tmux source-file $HOME/.tmux.conf; then
      echo -e '  \u001b[34mSourced tmux config\u001b[0m'
    else
      echo -e '  \u001b[34mError sourcing tmux configuration\u001b[0m'
    fi
  else
    echo -e '==========================='
    echo -e '  \u001b[34mError updating tmux plugins\u001b[0m'
    echo -e '  \u001b[34mvisit: https://github.com/tmux-plugins/tpm/blob/master/docs/managing_plugins_via_cmd_line.md\u001b[0m'
  fi
}

function updatezshcustom() {
  printf "\n${BLUE}%s${RESET}\n" "Updating custom plugins and themes"
  cd $ZSH_CUSTOM
  for plugin in plugins/*/ themes/*/; do
    if [ -d "$plugin/.git" ]; then
      printf "${YELLOW}%s${RESET}\n" "${plugin%/}"
      git -C "$plugin" pull
    fi
  done
}
