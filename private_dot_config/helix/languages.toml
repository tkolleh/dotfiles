#
# Introudce new language server
# - set max completion results len to 20
# - completions will return before snippets by default
#
[language-server.scls]
command = "simple-completion-language-server"

[language-server.scls.config]
max_completion_items = 20    # set max completion results len for each group: words, snippets, unicode-input
snippets_first = true        # completions will return before snippets by default
feature_words = true         # enable completion by word
feature_snippets = true      # enable snippets
feature_unicode_input = true # enable "unicode input"
feature_paths = true         # enable path completion

[[sources]] # list of sources to load
name = "friendly-snippets"                                  # optional name shown on snippet description
git = "https://github.com/rafamadriz/friendly-snippets.git" # git repo with snippets collections

# [language-server.gpt]
# command = "helix-gpt"
# args = ["--handler","codeium","--logFile","~/tmp/helix-gpt.log"]
# environment = { HANDLER = "codeium" }

# https://github.com/helix-editor/helix/wiki/Language-Server-Configurations#rust
[[language]]
name = "rust"

[language-server.rust-analyzer.config]
check = { command = "clippy", features = "all" }
diagnostics = { experimental = { enable = true } }
hover = { actions = { enable = true } }
typing = { autoClosingAngleBrackets = { enable = true } }
cargo = { allFeatures = true }
procMacro = { enable = true }

[[language]]
name = "typescript"
language-servers = [
  "typescript-language-server",
  "tailwindcss-react",
  "eslint",
  "emmet-ls",
  "scls",
  "gpt",
]
formatter = { command = 'npx', args = ["prettier", "--parser", "typescript"] }
auto-format = true

[[language]]
name = "tsx"
language-servers = [
  "typescript-language-server",
  "tailwindcss-react",
  "eslint",
  "emmet-ls",
  "scls",
  "gpt",
]
formatter = { command = 'npx', args = ["prettier", "--parser", "typescript"] }
auto-format = true

[[language]]
name = "jsx"
language-servers = [
  "typescript-language-server",
  "tailwindcss-react",
  "eslint",
  "emmet-ls",
  "scls",
  "gpt",
]
grammar = "javascript"
formatter = { command = 'npx', args = ["prettier", "--parser", "typescript"] }
auto-format = true

[[language]]
name = "javascript"
language-servers = [
  "typescript-language-server",
  "tailwindcss-react",
  "eslint",
  "emmet-ls",
  "scls",
  "gpt",
]
formatter = { command = 'npx', args = ["prettier", "--parser", "typescript"] }
auto-format = true

[[language]]
name = "json"
language-servers = ["vscode-json-language-server"]
formatter = { command = 'npx', args = ["prettier", "--parser", "json"] }
auto-format = true

[[language]]
name = "lua"
auto-format = true

[[grammar]]
name = "glimmer"
source = { git = "https://github.com/alexlafroscia/tree-sitter-glimmer", rev = "d3031a8294bf331600d5046b1d14e690a0d8ba0c"}

[language-server.vscode-json-language-server.config]
json = { validate = { enable = true }, format = { enable = true } }
provideFormatter = true

[language-server.vscode-css-language-server.config]
css = { validate = { enable = true } }
scss = { validate = { enable = true } }
less = { validate = { enable = true } }
provideFormatter = true

[[language]]
name = "html"
formatter = { command = 'npx', args = ["prettier", "--parser", "html"] }
language-servers = [
  "vscode-html-language-server",
  "tailwindcss-react",
  "emmet-ls",
]
auto-format = true

[[language]]
name = "css"
formatter = { command = 'npx', args = ["prettier", "--parser", "css"] }
language-servers = [
  "vscode-css-language-server",
  "tailwindcss-react",
  "emmet-ls",
]
auto-format = true

# https://github.com/helix-editor/helix/wiki/Language-Server-Configurations#scala
[[language]]
name = "scss"
formatter = { command = "prettier", args = ["--stdin-filepath", "dummy.scss"] }
language-servers = ["vscode-css-language-server", "gpt"]

[language-server.eslint]
args = ["--stdio"]
command = "vscode-eslint-language-server"

[language-server.eslint.config]
format = { enable = true }
nodePath = ""
quiet = false
rulesCustomizations = []
run = "onType"
validate = "on"
codeAction = { disableRuleComment = { enable = true, location = "separateLine" }, showDocumentation = { enable = false } }
codeActionsOnSave = { mode = "all", "source.fixAll.eslint" = true }
experimental = {}
problems = { shortenToSingleLine = false }

[[language]]
name = "python"
language-servers = [ "pyright", "ruff" ]

[language-server.pyright.config.python.analysis]
typeCheckingMode = "basic"

# if you choose `ruff-lsp`
[language-server.ruff]
command = "ruff-lsp"
[language-server.ruff.config.settings]
args = ["--ignore", "E501"]
